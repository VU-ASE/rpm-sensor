/**
 * A header file generated by I2C client driver
 *
 * @file i2c_client_interface.h
 *
 * @defgroup i2c_client I2C_CLIENT
 *
 * @brief This header file provides the prototypes for the portable firmware interfaces for I2C client.
 *
 * @version I2C Client Interface Version 1.0.4
*/

/*
© [2025] Microchip Technology Inc. and its subsidiaries.

    Subject to your compliance with these terms, you may use Microchip 
    software and any derivatives exclusively with Microchip products. 
    You are responsible for complying with 3rd party license terms  
    applicable to your use of 3rd party software (including open source  
    software) that may accompany Microchip software. SOFTWARE IS ?AS IS.? 
    NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS 
    SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT,  
    MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT 
    WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY 
    KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF 
    MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE 
    FORESEEABLE. TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP?S 
    TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT 
    EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR 
    THIS SOFTWARE.
*/

#ifndef I2C_CLIENT_INTERFACE_H
#define I2C_CLIENT_INTERFACE_H

#include <stdbool.h>
#include <stdint.h>
#include "i2c_client_types.h"

/**
 * @ingroup i2c_client
 * @struct i2c_client_interface_t
 * @brief This structure contains the portable interfaces for I2C client.
 */
typedef struct 
{
    /**
    * @brief Pointer to the function that initializes the I2C client.
    */
    void (*Initialize)(void);

    /**
    * @brief Pointer to the function that deinitializes the I2C client.
    */
    void (*Deinitialize)(void);

    /**
    * @brief Pointer to the function that sends data to a host on bus.
    */
    void (*WriteByte)(uint8_t data);

    /**
    * @brief Pointer to the function that reads data from a host on bus.
    */   
    uint8_t(*ReadByte)(void);

    /**
    * @brief Pointer to the function that returns the last error that occurred on the I2C bus.
    */
    i2c_client_error_t (*ErrorGet)(void);

    /**
    * @brief Pointer to the function that returns the direction of data transfer between client and a host on bus.
    */
    i2c_client_transfer_dir_t (*TransferDirGet)(void);

    /**
    * @brief Pointer to the function that retrieves the acknowledgment status of the last byte transferred.
    */  
    i2c_client_ack_status_t (*LastByteAckStatusGet)(void);

    /**
    * @brief Pointer to the function that registers a callback handler for I2C client.
    */
    void (*CallbackRegister)(bool (*handler)(i2c_client_transfer_event_t clientEvent));

    /**
    * @brief Pointer to the function that is polled for I2C client events.
    */
    void (*Tasks)(void);
}i2c_client_interface_t;

#endif /* I2C_CLIENT_INTERFACE_H */