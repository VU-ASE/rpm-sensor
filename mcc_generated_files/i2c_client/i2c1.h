/**
 * A header file generated by I2C1 I2C client driver.
 *
 * @file i2c1.h
 *
 * @defgroup i2c_interrupt I2C1_CLIENT_INTERRUPT
 *
 * @brief This header file contains API prototypes and other data types for the I2C1 driver.
 *
 * @version I2C1 Driver Version 2.2.1 \n
 * 
 * @version I2C1 Package Version 7.0.0 
 */

/*
© [2025] Microchip Technology Inc. and its subsidiaries.

    Subject to your compliance with these terms, you may use Microchip 
    software and any derivatives exclusively with Microchip products. 
    You are responsible for complying with 3rd party license terms  
    applicable to your use of 3rd party software (including open source  
    software) that may accompany Microchip software. SOFTWARE IS ?AS IS.? 
    NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS 
    SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT,  
    MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT 
    WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY 
    KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF 
    MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE 
    FORESEEABLE. TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP?S 
    TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT 
    EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR 
    THIS SOFTWARE.
*/

#ifndef I2C1_H
#define I2C1_H

/**
 * @misradeviation {advisory,2.5} False positive - A few macros in this file
 * are used as arguments but are not getting recognized by the tool.
 * This rule ID has been disabled at the project level due to numerous
 * instances across various files.
 * Consequently, in the application project, this rule ID must be disabled
 * in the MPLAB-X IDE by navigation to Tools -> Options -> Embedded -> MISRA Check.
*/

#include <stdbool.h>
#include <stdint.h>
#include "i2c_client_types.h"
#include "i2c_client_interface.h"

#define i2c1_client_interface I2C1_Client

#define  I2C1_Client_Initialize I2C1_Initialize
#define I2C1_Client_Deinitialize I2C1_Deinitialize
#define I2C1_Client_WriteByte I2C1_WriteByte
#define I2C1_Client_ReadByte I2C1_ReadByte
#define I2C1_Client_ReadAddr I2C1_ReadAddr
#define I2C1_Client_ErrorGet I2C1_ErrorGet
#define I2C1_Client_TransferDirGet I2C1_TransferDirGet
#define I2C1_Client_LastByteAckStatusGet I2C1_LastByteAckStatusGet
#define I2C1_Client_CallbackRegister I2C1_CallbackRegister
#define I2C1_Client_Tasks I2C1_Tasks

/**
 * @ingroup I2C_CLIENT
 * @brief Represents an instance of the portable interface structure designed for I2C1 client.
 */
extern const i2c_client_interface_t I2C1_Client;

/**
 * @ingroup i2c_client_interrupt
 * @brief Initializes the I2C1 client module according to the settings specified in the MPLAB® Code Configurator Melody UI.
 * @param None.
 * @return None. \n
 */
void I2C1_Initialize(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Resets the registers to their default Power-on Reset (POR) values.
 * @param None.
 * @return None. \n
 */
void I2C1_Deinitialize(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Sends data to a host on the bus.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param [in] data - I2C1 client write byte
 * @return None. \n
 */
void I2C1_WriteByte(uint8_t data);

/**
 * @ingroup i2c_client_interrupt
 * @brief Reads data from a host on the bus.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.      
 * @return uint8_t - I2C1 client read byte \n
 */
uint8_t I2C1_ReadByte(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the most recently matched address received from the host.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param None. 
 * @return uint16_t - Last Matched address for I2C1 client
 */
uint16_t I2C1_ReadAddr(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the type of error that occurred during I2C communication.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param None.
 * @return I2C_CLIENT_ERROR_BUS_COLLISION - I2C Bus collision error \n
 * @return I2C_CLIENT_ERROR_WRITE_COLLISION - I2C Write collision error \n
 * @return I2C_CLIENT_ERROR_RECEIVE_OVERFLOW - I2C Receive overflow error\n
 * @return I2C_CLIENT_ERROR_NONE - No error
 */
i2c_client_error_t I2C1_ErrorGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the data transfer direction.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param None.
 * @return I2C_CLIENT_TRANSFER_DIR_WRITE  - I2C host writes to client \n
 * @return I2C_CLIENT_TRANSFER_DIR_READ   - I2C host reads from client \n
 */
i2c_client_transfer_dir_t I2C1_TransferDirGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the acknowledgement status from host.
 *        Ensure I2C1 is initialized using I2C1_Initialize() before invoking this function.
 * @param None.
 * @return I2C_CLIENT_ACK_STATUS_RECEIVED_ACK - An ACK was received for the most recent transaction with the host \n
 * @return I2C_CLIENT_ACK_STATUS_RECEIVED_NACK - A NACK was received for the most recent transaction with the host \n
 */
i2c_client_ack_status_t I2C1_LastByteAckStatusGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Registers a callback function.
 * @param callback - Pointer to custom callback.
 * @return None.
 */
void I2C1_CallbackRegister(bool (*callback)(i2c_client_transfer_event_t clientEvent));

/**
 * @ingroup i2c_client
 * @brief Interrupt Service Routine (ISR) function for all I2C1 interrupts.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param None.
 * @return None. \n
 */
void I2C1_ISR(void);

/**
 * @ingroup i2c_client
 * @brief Interrupt Service Routine (ISR) for error interrupts.
 *        Ensure I2C1 client is initialized using 
 *        I2C1_Initialize() before invoking this function.
 * @param None.
 * @return None. \n
 */
void I2C1_ERROR_ISR(void);

#endif /* I2C1_H */
